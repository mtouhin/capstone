# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@1.4.0
  kubernetes: circleci/kubernetes@1.3
  anchore: anchore/anchore-engine@1.0.0

commands:
  destroy-environment:
    description: Destroy cluster
    steps:
      - aws-eks/delete-cluster:
          cluster-name: capstone

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
            
  test_docker:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint >> output.txt
            if grep '10.00/10' output.txt
            then
              echo "linting PASSED"
              exit 0
            else
              exit 1
            fi
            
  docker_build_upload:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            dockerpath=$DOCKER_PATH
            docker build --tag=micro .
            docker image ls
            docker login --username=$DOCKER_USER --password=$DOCKER_PASS
            docker tag micro $dockerpath  
            echo "Docker ID and Image: $dockerpath"
            docker push $dockerpath
  
  docker_security_scan:
    executor: anchore/anchore_engine
    steps:
      - checkout
      - anchore/analyze_local_image:
          image_name: micro
          timeout: '500'

  test_cluster:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deploy,rs,svc,pods

  deploy_infrastructure:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yml
          resource-name: deployment
      - run:
          kubectl apply -f service.yml

workflows:
  my_workflow:
    jobs:
      - build
      - test_docker:
          requires: [build]
      - docker_build_upload:
          requires: [test_docker]
      #- docker_security_scan:
          #requires: [docker_build_upload]
      - aws-eks/create-cluster:
          cluster-name: capstone
          requires: [docker_build_upload]
      - test_cluster:
          requires: [aws-eks/create-cluster]
      - deploy_infrastructure:
          requires: [test_cluster]
      #- aws-eks/delete-cluster:
      #    cluster-name: capstone
      #    requires: [deploy_infrastructure]
