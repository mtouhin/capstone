# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@1.4.0
  kubernetes: circleci/kubernetes@1.3

commands:
  destroy-environment:
    description: Destroy cluster   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name eks-capstone-cluster

jobs:

  build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
     # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
            
  test_docker:
    docker:
        # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint >> output.txt
            if grep '10.00/10' output.txt
            then
              echo "linting PASSED"
              exit 0
            else
              exit 1
            fi
            
  docker_build_upload:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            dockerpath=$DOCKER_PATH
            docker build --tag=micro .
            docker image ls
            docker login --username=$DOCKER_USER --password=$DOCKER_PASS
            docker tag micro $dockerpath  
            echo "Docker ID and Image: $dockerpath"
            docker push $dockerpath
  
  test_cluster:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deploy,rs,svc,pods

  deploy_infrastructure:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: 'EKS'
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yaml
          resource-name: deployment
      - run:
          kubectl apply -f service.yaml

  create_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip
            apk add --update tar gzip  curl python
            pip install awscli
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin  
            
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: install authenticator
          command: |
            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
      - run: 
          name: create infrastructure
          command: |
            #kubectl get nodes
            #kubectl create deploy micro --image=mtouhin/micro:latest
            #kubectl get deploy,rs,svc,pods
            #eksctl create cluster --name capstone --region=us-east-1
            #aws eks describe-cluster --name capstone --query cluster.endpoint --output text
            #eksctl get nodegroups --cluster capstone
      #- destroy-environment
      
  configure_infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl python jq
            pip install awscli

      - run:
          name: Get dns name
          command: |
            URLS=$(aws ec2 describe-instances --filters "Name=tag:eks:cluster-name,Values=capstone" --query "Reservations[*].Instances[*].PublicDnsName" --output text) ;
            curl -H "Content-Type: text/plain" -H "token: HbfEaJNUXNPZ2MNx4KVzaV" --request PUT --data "$URLS" https://kvdb.io/HbfEaJNUXNPZ2MNx4KVzaV/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}
            echo $URLS
      - destroy-environment
            
  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip
            apk add --update tar gzip ansible nodejs npm curl python jq
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: delete cluster
          command: |
            aws cloudformation delete-stack --stack-name eks-capstone-cluster

workflows:
  my_workflow:
    jobs:
      - build
      - test_docker:
          requires: [build]
      - docker_build_upload:
          requires: [test_docker]
      - aws-eks/create-cluster:
          cluster-name: capstone
          requires: [build, test_docker, docker_build_upload]
      - test_cluster:
          requires: [build, test_docker, docker_build_upload, aws-eks/create-cluster]
      - deploy_infrastructure:
          requires: [test_cluster]
      #- create_infrastructure:
      #    requires: [build, test_docker, docker_build_upload, aws-eks/create-cluster]
      - aws-eks/delete-cluster:
          cluster-name: capstone
          requires: [create_infrastructure]
      #- configure_infrastructure:
      #    requires: [create_infrastructure]
      #- cleanup:
      #    requires: [create_infrastructure, configure_infrastructure]